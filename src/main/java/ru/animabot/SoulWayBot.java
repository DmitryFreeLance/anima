package ru.animabot;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.groupadministration.BanChatMember;
import org.telegram.telegrambots.meta.api.methods.groupadministration.CreateChatInviteLink;
import org.telegram.telegrambots.meta.api.methods.send.*;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.media.InputMedia;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaDocument;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.InputFile;

import java.io.File;
import java.net.URI;
import java.text.Normalizer;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.*;

/**
 * SoulWayBot + Prodamus:
 *  - –ü—Ä–æ–µ–∫—Ç –º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ /work; –±–æ—Ç —á–∏—Ç–∞–µ—Ç ./soulway.db –∏ ./files/...
 *  - –¢–∞—Ä–∏—Ñ—ã –¥–æ–±–∞–≤–ª—è—é—Ç customer_extra=<uid>&days=<N> –∫ —Å—Å—ã–ª–∫–∞–º Prodamus.
 *  - Webhook Prodamus –≤—ã–∑—ã–≤–∞–µ—Ç onProdamusPaid(uid, days).
 *  - –ß–∏—Å—Ç–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫.
 *  - /addkw KEY|INTRO|REWARD|mat1,mat2 (–º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏/—Ä—É—Å—Å–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏).
 */
public class SoulWayBot extends TelegramLongPollingBot {

    private static final Logger LOG = LoggerFactory.getLogger(SoulWayBot.class);

    // ==== –ö–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ====
    private static final String S_WELCOME_TEXT  = "welcome_text";
    private static final String S_WELCOME_VIDEO = "welcome_video";

    private static final String S_CLUB_TEXT     = "club_text";
    private static final String S_REVIEWS_TEXT  = "reviews_text";
    private static final String S_REVIEWS_URL   = "reviews_url";
    private static final String S_ABOUT_TEXT    = "about_text";
    private static final String S_SESSIONS_TEXT = "sessions_text";
    private static final String S_SESSIONS_URL  = "sessions_url";
    private static final String S_PROCVETA_TEXT = "procveta_text";
    private static final String S_PROCVETA_URL  = "procveta_url";

    // –¢–∞—Ä–∏—Ñ—ã
    private static final String S_TAR1_LABEL = "tariff1_label";
    private static final String S_TAR1_DAYS  = "tariff1_days";
    private static final String S_TAR1_URL   = "tariff1_url";

    private static final String S_TAR2_LABEL = "tariff2_label";
    private static final String S_TAR2_DAYS  = "tariff2_days";
    private static final String S_TAR2_URL   = "tariff2_url";

    private static final String S_TAR3_LABEL = "tariff3_label";
    private static final String S_TAR3_DAYS  = "tariff3_days";
    private static final String S_TAR3_URL   = "tariff3_url";

    private static final String S_GROUP_ID         = "group_id";          // -100...
    private static final String S_GROUP_INVITE_URL = "group_invite_url";  // –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞)

    // –ë–æ—Ç / –ê–¥–º–∏–Ω / –ö–∞–Ω–∞–ª
    private final String BOT_TOKEN    = System.getenv().getOrDefault("TG_BOT_TOKEN", "CHANGE_ME");
    private final String BOT_USERNAME = System.getenv().getOrDefault("TG_BOT_USERNAME", "SoulWayClub_bot");
    private final long   ADMIN_ID     = Long.parseLong(System.getenv().getOrDefault("TG_ADMIN_ID", "0"));
    private final String CHANNEL_ID   = System.getenv().getOrDefault("TG_CHANNEL_ID", "sibirskaiapro"); // –±–µ–∑ @

    private final SQLiteManager db;
    private final SimpleDateFormat df = new SimpleDateFormat("dd.MM.yyyy HH:mm");

    // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç—ë–∫—à–∏—Ö
    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();

    public SoulWayBot() {
        db = new SQLiteManager("soulway.db");
        df.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));
        seedDefaults();
        scheduler.scheduleAtFixedRate(() -> {
            try { cleanupExpired(); } catch (Exception e) { LOG.warn("cleanup error", e); }
        }, 30, 30, TimeUnit.MINUTES);
    }

    private void seedDefaults() {
        // –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        putIfEmpty(S_WELCOME_TEXT,
                "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ SoulWayClub –ë–æ—Ç.\n" +
                        "–í–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–æ–∫ üéÅ\n\n" +
                        "–Ø ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –∏ —Å–ª–∏—è–Ω–∏—è —Å–æ —Å–≤–æ–µ–π –î—É—à–æ–π, " +
                        "—Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å–∏–ª—ã, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–≤ –∏ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ‚ú®\n\n" +
                        "–ì–æ—Ç–æ–≤–∞ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∫—É—Å –∂–∏–∑–Ω–∏, —ç–Ω–µ—Ä–≥–∏—é –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ? –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è ‚ù§Ô∏è\n\n" +
                        "–ù–∞–∂–º–∏ ¬´–û –ö–ª—É–±–µ¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ, –∏–ª–∏ ¬´–¢–∞—Ä–∏—Ñ—ã¬ª, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.");

        putIfEmpty(S_CLUB_TEXT,
                "üìò –û –ö–õ–£–ë–ï\n\n" +
                        "‚Äî –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∞–∫—Ç–∏–∫–∞–º –∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è–º\n" +
                        "‚Äî –û–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∏ —Å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º\n" +
                        "‚Äî –û–±—â–µ–µ –ø–æ–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —á–∞—Ç\n" +
                        "‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏\n");

        putIfEmpty(S_REVIEWS_TEXT,  "üìù –û–¢–ó–´–í–´\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã:");
        putIfEmpty(S_REVIEWS_URL,   "https://t.me/sibirskaiapro/336");
        putIfEmpty(S_ABOUT_TEXT,    "üë§ –û–ë–û –ú–ù–ï\n\n–ê–Ω–Ω–∞ –°–∏–±–∏—Ä—Å–∫–∞—è ‚Äî —ç–Ω–µ—Ä–≥–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç, —á–µ–Ω–Ω–µ–ª–µ—Ä, –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ –∂–∏–∑–Ω–∏ —Å–≤–æ–µ–π –º–µ—á—Ç—ã.");
        putIfEmpty(S_SESSIONS_TEXT, "üßò‚Äç‚ôÄÔ∏è –ú–û–ò –°–ï–ê–ù–°–´\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ —Å–µ–∞–Ω—Å–∞–º–∏:");
        putIfEmpty(S_SESSIONS_URL,  "https://t.me/sibirskaiapro/65");
        putIfEmpty(S_PROCVETA_TEXT, "üå∏ –ö–õ–£–ë ¬´–ü–†–û–¶–í–ï–¢–ê–ô¬ª\n–ö–ª—É–± —Å –∂–∏–≤—ã–º–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ ‚ù§Ô∏è");
        putIfEmpty(S_PROCVETA_URL,  "https://t.me/procvetaiclub");

        // –ë–æ–µ–≤—ã–µ 3 —Ç–∞—Ä–∏—Ñ–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π 10 ‚ÇΩ —É–¥–∞–ª—ë–Ω)
        putIfEmpty(S_TAR1_LABEL, "1 –ú–ï–° ‚Ä¢ 1299 ‚ÇΩ");
        putIfEmpty(S_TAR1_DAYS,  "30");
        putIfEmpty(S_TAR1_URL,   "https://payform.ru/4e9isVQ/");

        putIfEmpty(S_TAR2_LABEL, "3 –ú–ï–° ‚Ä¢ 3599 ‚ÇΩ");
        putIfEmpty(S_TAR2_DAYS,  "90");
        putIfEmpty(S_TAR2_URL,   "https://payform.ru/en9it1j/");

        putIfEmpty(S_TAR3_LABEL, "12 –ú–ï–° ‚Ä¢ 12900 ‚ÇΩ");
        putIfEmpty(S_TAR3_DAYS,  "365");
        putIfEmpty(S_TAR3_URL,   "https://payform.ru/kr9it4z/");
    }

    private void putIfEmpty(String key, String value) {
        String cur = db.getSetting(key, null);
        if (cur == null || cur.isBlank()) db.setSetting(key, value);
    }

    @Override public String getBotUsername() { return BOT_USERNAME; }
    @Override public String getBotToken()    { return BOT_TOKEN;     }

    // ===================== Updates =====================

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update == null) return;
            if (update.hasMessage()) handleMessage(update.getMessage());
            else if (update.hasCallbackQuery()) handleCallback(update.getCallbackQuery());
        } catch (Exception e) {
            LOG.error("Error processing update", e);
        }
    }

    // ===================== Messages & Commands =====================

    private void handleMessage(Message msg) {
        if (msg == null || msg.getFrom() == null) return;
        long chatId = msg.getChatId();
        String text = msg.hasText() ? msg.getText().trim() : "";

        try {
            if (text.startsWith("/")) {
                handleCommand(msg, text);
                return;
            }

            if (!text.isEmpty()) {
                Keyword kw = db.findKeywordByKey(text);
                if (kw != null) {
                    SendMessage sm = new SendMessage();
                    sm.setChatId(String.valueOf(chatId));
                    sm.setText(nonEmpty(kw.getIntroText(), "üéÅ –ü–æ–¥–∞—Ä–æ–∫:"));
                    sm.setReplyMarkup(buildIntroKeyboard(kw));
                    execute(sm);
                } else {
                    sendText(chatId, "‚ùå –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ (–±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞) –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ç–¥–µ–ª –∑–∞–±–æ—Ç—ã.");
                }
            }
        } catch (Exception e) {
            LOG.error("handleMessage error", e);
        }
    }

    private void handleCommand(Message msg, String text) {
        long chatId = msg.getChatId();
        long userId = msg.getFrom().getId();
        String[] parts = text.split(" ", 2);
        String cmd  = parts[0].toLowerCase(Locale.ROOT);
        String args = parts.length > 1 ? parts[1] : "";

        try {
            switch (cmd) {
                case "/start": {
                    sendWelcomeWithMenu(chatId, msg.getFrom().getFirstName() != null ? msg.getFrom().getFirstName() : "–¥—Ä—É–≥");
                    break;
                }
                case "/addkw": {
                    if (!isAdmin(userId)) { sendText(chatId, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."); return; }
                    if (args.isBlank()) { sendText(chatId, "–§–æ—Ä–º–∞—Ç: /addkw KEY|INTRO|REWARD|–º–∞—Ç1,–º–∞—Ç2"); return; }
                    String[] p = args.split("\\|", 4);
                    if (p.length < 3) { sendText(chatId, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º KEY|INTRO|REWARD"); return; }
                    Keyword kw = new Keyword();
                    kw.setKeyword(safeTrim(p[0]));
                    kw.setIntroText(safeTrim(p[1]));
                    kw.setRewardText(safeTrim(p[2]));
                    if (p.length == 4 && p[3] != null && !p[3].isBlank()) {
                        List<String> mats = new ArrayList<>();
                        for (String s : p[3].split(",")) { String v = safeTrim(s); if (!v.isEmpty()) mats.add(v); }
                        kw.setMaterials(mats);
                    } else kw.setMaterials(Collections.emptyList());
                    db.upsertKeyword(kw);
                    sendText(chatId, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: " + kw.getKeyword() +
                            (kw.getMaterials().isEmpty() ? "" : "\n–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: " + kw.materialsAsString()));
                    break;
                }
                case "/listkw": {
                    if (!isAdmin(userId)) { sendText(chatId, "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."); return; }
                    List<Keyword> list = db.listKeywords();
                    if (list.isEmpty()) sendText(chatId, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.");
                    else {
                        StringBuilder sb = new StringBuilder("–ö–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞:\n");
                        for (Keyword k : list) sb.append("‚Ä¢ ").append(k.getKeyword()).append("\n");
                        sendText(chatId, sb.toString());
                    }
                    break;
                }

                // ===== —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —Ç–µ–∫—Å—Ç—ã/—Å—Å—ã–ª–∫–∏ =====
                case "/setwelcome":       if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_WELCOME_TEXT, args); sendText(chatId, "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω."); break;
                case "/setwelcomevideo":  if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_WELCOME_VIDEO, args); sendText(chatId, "‚úÖ –í–∏–¥–µ–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ."); break;
                case "/setclub":          if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_CLUB_TEXT, args);     sendText(chatId, "‚úÖ –¢–µ–∫—Å—Ç ¬´–û –ö–ª—É–±–µ¬ª –æ–±–Ω–æ–≤–ª—ë–Ω."); break;
                case "/setreviews":       if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_REVIEWS_URL, args);   sendText(chatId, "‚úÖ –°—Å—ã–ª–∫–∞ ¬´–û—Ç–∑—ã–≤—ã¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞."); break;
                case "/setreviews_text":  if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_REVIEWS_TEXT, args);  sendText(chatId, "‚úÖ –¢–µ–∫—Å—Ç ¬´–û—Ç–∑—ã–≤—ã¬ª –æ–±–Ω–æ–≤–ª—ë–Ω."); break;
                case "/setabout":         if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_ABOUT_TEXT, args);    sendText(chatId, "‚úÖ –¢–µ–∫—Å—Ç ¬´–û–±–æ –º–Ω–µ¬ª –æ–±–Ω–æ–≤–ª—ë–Ω."); break;
                case "/setsessions":      if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_SESSIONS_URL, args);  sendText(chatId, "‚úÖ –°—Å—ã–ª–∫–∞ ¬´–ú–æ–∏ —Å–µ–∞–Ω—Å—ã¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞."); break;
                case "/setsessions_text": if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_SESSIONS_TEXT, args); sendText(chatId, "‚úÖ –¢–µ–∫—Å—Ç ¬´–ú–æ–∏ —Å–µ–∞–Ω—Å—ã¬ª –æ–±–Ω–æ–≤–ª—ë–Ω."); break;
                case "/setprocveta":      if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_PROCVETA_URL, args);  sendText(chatId, "‚úÖ –°—Å—ã–ª–∫–∞ ¬´–ö–ª—É–± –ü—Ä–æ—Ü–≤–µ—Ç–∞–π¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞."); break;
                case "/setprocveta_text": if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_PROCVETA_TEXT, args); sendText(chatId, "‚úÖ –¢–µ–∫—Å—Ç ¬´–ö–ª—É–± –ü—Ä–æ—Ü–≤–µ—Ç–∞–π¬ª –æ–±–Ω–æ–≤–ª—ë–Ω."); break;

                // ===== –¢–∞—Ä–∏—Ñ—ã (–ª–µ–π–±–ª/–¥–Ω–∏/URL) =====
                case "/settariff1": { // LABEL|DAYS|URL
                    if (!isAdmin(userId)) { deny(chatId); break; }
                    String[] a = args.split("\\|", 3);
                    if (a.length < 3) { sendText(chatId, "–§–æ—Ä–º–∞—Ç: /settariff1 LABEL|DAYS|URL"); break; }
                    db.setSetting(S_TAR1_LABEL, a[0].trim());
                    db.setSetting(S_TAR1_DAYS,  a[1].trim());
                    db.setSetting(S_TAR1_URL,   a[2].trim());
                    sendText(chatId, "‚úÖ –¢–∞—Ä–∏—Ñ #1 —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
                    break;
                }
                case "/settariff2": {
                    if (!isAdmin(userId)) { deny(chatId); break; }
                    String[] a = args.split("\\|", 3);
                    if (a.length < 3) { sendText(chatId, "–§–æ—Ä–º–∞—Ç: /settariff2 LABEL|DAYS|URL"); break; }
                    db.setSetting(S_TAR2_LABEL, a[0].trim());
                    db.setSetting(S_TAR2_DAYS,  a[1].trim());
                    db.setSetting(S_TAR2_URL,   a[2].trim());
                    sendText(chatId, "‚úÖ –¢–∞—Ä–∏—Ñ #2 —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
                    break;
                }
                case "/settariff3": {
                    if (!isAdmin(userId)) { deny(chatId); break; }
                    String[] a = args.split("\\|", 3);
                    if (a.length < 3) { sendText(chatId, "–§–æ—Ä–º–∞—Ç: /settariff3 LABEL|DAYS|URL"); break; }
                    db.setSetting(S_TAR3_LABEL, a[0].trim());
                    db.setSetting(S_TAR3_DAYS,  a[1].trim());
                    db.setSetting(S_TAR3_URL,   a[2].trim());
                    sendText(chatId, "‚úÖ –¢–∞—Ä–∏—Ñ #3 —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
                    break;
                }

                // ===== –ì—Ä—É–ø–ø–∞ / –°–µ—Ä–≤–∏—Å–Ω—ã–µ =====
                case "/setgroup":     if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_GROUP_ID, args.trim());         sendText(chatId, "‚úÖ ID –≥—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω."); break;
                case "/setgrouplink": if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_GROUP_INVITE_URL, args.trim()); sendText(chatId, "‚úÖ –ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ –≥—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."); break;
                case "/grantsub": {
                    if (!isAdmin(userId)) { deny(chatId); break; }
                    String[] a = args.split("\\s+");
                    if (a.length < 2) { sendText(chatId, "–§–æ—Ä–º–∞—Ç: /grantsub <userId> <days>"); break; }
                    long uid = Long.parseLong(a[0]);
                    int days = Integer.parseInt(a[1]);
                    db.grantSubscription(uid, days);
                    sendText(chatId, "‚úÖ –í—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: user " + uid + " –Ω–∞ " + days + " –¥–Ω.");
                    String invite = ensureInviteLink();
                    if (invite != null) sendText(uid, "üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç: " + invite);
                    break;
                }
                case "/cleanup": {
                    if (!isAdmin(userId)) { deny(chatId); break; }
                    int n = cleanupExpired();
                    sendText(chatId, "üßπ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –≥—Ä—É–ø–ø—ã: " + n);
                    break;
                }

                default:
                    sendText(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
            }
        } catch (Exception e) {
            LOG.error("handleCommand error", e);
        }
    }

    private boolean isAdmin(long uid) { return uid == ADMIN_ID; }
    private void deny(long chatId) { sendText(chatId, "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."); }

    // ===================== Callbacks =====================

    private static final String CB_CHECKSUB_PREFIX = "CHECKSUB:";
    private static final String CB_MENU_CLUB   = "MENU:CLUB";
    private static final String CB_MENU_TARIFF = "MENU:TARIFFS";
    private static final String CB_MENU_REV    = "MENU:REVIEWS";
    private static final String CB_MENU_ABOUT  = "MENU:ABOUT";
    private static final String CB_MENU_SESS   = "MENU:SESSIONS";
    private static final String CB_MENU_SUB    = "MENU:SUB";
    private static final String CB_MENU_PROCV  = "MENU:PROCVETA";
    private static final String CB_MENU_BACK   = "MENU:BACK";

    private void handleCallback(CallbackQuery cb) {
        if (cb == null) return;
        String data = cb.getData();
        long uid = cb.getFrom().getId();
        long chatId = cb.getMessage() != null ? cb.getMessage().getChatId() : uid;

        try {
            if (data != null && data.startsWith(CB_CHECKSUB_PREFIX)) {
                String key = data.substring(CB_CHECKSUB_PREFIX.length());
                Keyword kw = db.findKeywordByKey(key);
                if (kw == null) { answerCallback(cb.getId(), "–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."); return; }
                answerCallback(cb.getId(), "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!");
                sendReward(chatId, kw); // —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–±–µ–∑ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è)
                String firstName = cb.getFrom().getFirstName() != null ? cb.getFrom().getFirstName() : "–¥—Ä—É–≥";
                sendWelcomeWithMenu(chatId, firstName); // –æ–¥–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                return;
            }

            switch (data) {
                case CB_MENU_CLUB: {
                    String club = db.getSetting(S_CLUB_TEXT, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
                    sendMenuSection(chatId, club, buildClubMenu());
                    answerCallback(cb.getId(), "");
                    break;
                }
                case CB_MENU_TARIFF: {
                    sendTariffs(chatId, uid, true);
                    answerCallback(cb.getId(), "");
                    break;
                }
                case CB_MENU_REV: {
                    String header = db.getSetting(S_REVIEWS_TEXT, "üìù –û–¢–ó–´–í–´\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã:");
                    String url = db.getSetting(S_REVIEWS_URL, "");
                    sendLinkSection(chatId, header, url, true);
                    answerCallback(cb.getId(), "");
                    break;
                }
                case CB_MENU_ABOUT: {
                    String about = db.getSetting(S_ABOUT_TEXT, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ¬´–û–±–æ –º–Ω–µ¬ª –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
                    sendMenuSection(chatId, about, true);
                    answerCallback(cb.getId(), "");
                    break;
                }
                case CB_MENU_SESS: {
                    String header = db.getSetting(S_SESSIONS_TEXT, "üßò‚Äç‚ôÄÔ∏è –ú–û–ò –°–ï–ê–ù–°–´\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ —Å–µ–∞–Ω—Å–∞–º–∏:");
                    String url = db.getSetting(S_SESSIONS_URL, "");
                    sendLinkSection(chatId, header, url, true);
                    answerCallback(cb.getId(), "");
                    break;
                }
                case CB_MENU_SUB: {
                    sendSubscriptionStatus(chatId, uid, true);
                    answerCallback(cb.getId(), "");
                    break;
                }
                case CB_MENU_PROCV: {
                    String header = db.getSetting(S_PROCVETA_TEXT, "üå∏ –ö–õ–£–ë ¬´–ü–†–û–¶–í–ï–¢–ê–ô¬ª\n–û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ.");
                    String url = db.getSetting(S_PROCVETA_URL, "");
                    sendLinkSection(chatId, header, url, true);
                    answerCallback(cb.getId(), "");
                    break;
                }
                case CB_MENU_BACK: {
                    String firstName = cb.getFrom().getFirstName() != null ? cb.getFrom().getFirstName() : "–¥—Ä—É–≥";
                    sendWelcomeWithMenu(chatId, firstName);
                    answerCallback(cb.getId(), "");
                    break;
                }

                default:
                    answerCallback(cb.getId(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.");
            }
        } catch (Exception e) {
            LOG.error("handleCallback error", e);
        }
    }

    // ===================== –í–∏—Ç—Ä–∏–Ω—ã –∏ –º–µ–Ω—é =====================

    private InlineKeyboardMarkup buildIntroKeyboard(Keyword kw) {
        InlineKeyboardButton subscribe = new InlineKeyboardButton();
        subscribe.setText("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è");
        subscribe.setUrl("https://t.me/" + CHANNEL_ID);

        InlineKeyboardButton already = new InlineKeyboardButton();
        already.setText("‚úÖ –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞");
        already.setCallbackData(CB_CHECKSUB_PREFIX + kw.getKeyword());

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(Arrays.asList(subscribe, already));

        InlineKeyboardMarkup kb = new InlineKeyboardMarkup();
        kb.setKeyboard(rows);
        return kb;
    }

    /** –ü—Ä–∏–≤–µ—Ç + –º–µ–Ω—é (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ –≤–∏–¥–µ–æ ‚Äî —à–ª—ë–º –≤–∏–¥–µ–æ; –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç). */
    private void sendWelcomeWithMenu(long chatId, String userName) {
        String raw = db.getSetting(S_WELCOME_TEXT,
                "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ SoulWayClub –ë–æ—Ç.\n–í–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–æ–∫ üéÅ");
        String text = raw.replace("{name}", userName);

        String videoRef = db.getSetting(S_WELCOME_VIDEO, null);
        InlineKeyboardMarkup menu = buildMainMenu();

        if (videoRef != null && !videoRef.isBlank()) {
            try {
                SendVideo sv = new SendVideo();
                sv.setChatId(String.valueOf(chatId));

                File f = resolveLocalPath(videoRef);
                if (f != null && f.exists() && f.isFile()) {
                    sv.setVideo(new InputFile(f, f.getName()));
                } else {
                    if (isHttpUrl(videoRef)) sv.setVideo(new InputFile(normalizeUrl(videoRef)));
                    else                     sv.setVideo(new InputFile(videoRef)); // file_id
                }
                sv.setCaption(text);
                sv.setReplyMarkup(menu);
                execute(sv);
                return;
            } catch (Exception e) {
                LOG.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {}", e.getMessage());
            }
        }
        SendMessage sm = new SendMessage(String.valueOf(chatId), text);
        sm.setReplyMarkup(menu);
        safeExec(sm);
    }

    private InlineKeyboardMarkup buildMainMenu() {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(btn("üìò –û –ö–õ–£–ë–ï", CB_MENU_CLUB)));
        rows.add(List.of(btn("üí≥ –¢–ê–†–ò–§–´", CB_MENU_TARIFF)));
        rows.add(List.of(btn("üìù –û–¢–ó–´–í–´", CB_MENU_REV)));
        rows.add(List.of(btn("üë§ –û–ë–û –ú–ù–ï", CB_MENU_ABOUT)));
        rows.add(List.of(btn("üßò‚Äç‚ôÄÔ∏è –ú–û–ò –°–ï–ê–ù–°–´", CB_MENU_SESS)));
        rows.add(List.of(btn("üé´ –í–ê–®–ê –ü–û–î–ü–ò–°–ö–ê", CB_MENU_SUB)));
        rows.add(List.of(btn("üå∏ –ö–õ–£–ë ¬´–ü–†–û–¶–í–ï–¢–ê–ô¬ª", CB_MENU_PROCV)));
        return new InlineKeyboardMarkup(rows);
    }

    private InlineKeyboardMarkup buildClubMenu() {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(btn("üí≥ –¢–ê–†–ò–§–´", CB_MENU_TARIFF)));
        rows.add(List.of(btn("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é", CB_MENU_BACK)));
        return new InlineKeyboardMarkup(rows);
    }

    private InlineKeyboardMarkup addBackButton(InlineKeyboardMarkup kb) {
        List<List<InlineKeyboardButton>> rows = (kb == null || kb.getKeyboard() == null)
                ? new ArrayList<>()
                : new ArrayList<>(kb.getKeyboard());
        rows.add(Collections.singletonList(btn("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é", CB_MENU_BACK)));
        InlineKeyboardMarkup out = new InlineKeyboardMarkup();
        out.setKeyboard(rows);
        return out;
    }

    private void sendMenuSection(long chatId, String text, boolean withBack) {
        SendMessage sm = new SendMessage(String.valueOf(chatId), text);
        sm.setReplyMarkup(withBack ? addBackButton(null) : null);
        safeExec(sm);
    }

    private void sendMenuSection(long chatId, String text, InlineKeyboardMarkup kb) {
        SendMessage sm = new SendMessage(String.valueOf(chatId), text);
        sm.setReplyMarkup(kb);
        safeExec(sm);
    }

    private void sendLinkSection(long chatId, String header, String url, boolean withBack) {
        String body = header + (url == null || url.isBlank() ? "" : "\n" + url);
        SendMessage sm = new SendMessage(String.valueOf(chatId), body);
        sm.setReplyMarkup(withBack ? addBackButton(null) : null);
        safeExec(sm);
    }

    /** –ì–µ–Ω–µ—Ä–∏–º –∫–Ω–æ–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤: –¥–æ–±–∞–≤–ª—è–µ–º customer_extra=<uid>&days=<N> */
    private void sendTariffs(long chatId, long userId, boolean withBack) {
        String l1 = db.getSetting(S_TAR1_LABEL, "1 –ú–ï–° ‚Ä¢ 1299 ‚ÇΩ");
        int    d1 = safeParseInt(db.getSetting(S_TAR1_DAYS, "30"), 30);
        String u1 = db.getSetting(S_TAR1_URL,  "https://payform.ru/4e9isVQ/");

        String l2 = db.getSetting(S_TAR2_LABEL, "3 –ú–ï–° ‚Ä¢ 3599 ‚ÇΩ");
        int    d2 = safeParseInt(db.getSetting(S_TAR2_DAYS, "90"), 90);
        String u2 = db.getSetting(S_TAR2_URL,  "https://payform.ru/en9it1j/");

        String l3 = db.getSetting(S_TAR3_LABEL, "12 –ú–ï–° ‚Ä¢ 12900 ‚ÇΩ");
        int    d3 = safeParseInt(db.getSetting(S_TAR3_DAYS, "365"), 365);
        String u3 = db.getSetting(S_TAR3_URL,  "https://payform.ru/kr9it4z/");

        String link1 = appendParams(u1, Map.of("customer_extra", String.valueOf(userId), "days", String.valueOf(d1)));
        String link2 = appendParams(u2, Map.of("customer_extra", String.valueOf(userId), "days", String.valueOf(d2)));
        String link3 = appendParams(u3, Map.of("customer_extra", String.valueOf(userId), "days", String.valueOf(d3)));

        InlineKeyboardButton b1 = new InlineKeyboardButton(l1 + " ‚Ä¢ –æ–ø–ª–∞—Ç–∏—Ç—å"); b1.setUrl(link1);
        InlineKeyboardButton b2 = new InlineKeyboardButton(l2 + " ‚Ä¢ –æ–ø–ª–∞—Ç–∏—Ç—å"); b2.setUrl(link2);
        InlineKeyboardButton b3 = new InlineKeyboardButton(l3 + " ‚Ä¢ –æ–ø–ª–∞—Ç–∏—Ç—å"); b3.setUrl(link3);

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(b1));
        rows.add(List.of(b2));
        rows.add(List.of(b3));
        if (withBack) rows.add(Collections.singletonList(btn("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é", CB_MENU_BACK)));

        InlineKeyboardMarkup kb = new InlineKeyboardMarkup(rows);

        String intro =
                "üí≥ –¢–ê–†–ò–§–´\n\n" +
                        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å —É—á–∞—Å—Ç–∏–µüëáüèª\n\n" +
                        "P.S. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —è –ø—Ä–∏—à–ª—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç.";

        SendMessage sm = new SendMessage(String.valueOf(chatId), intro);
        sm.setReplyMarkup(kb);
        safeExec(sm);
    }

    private void sendSubscriptionStatus(long chatId, long userId, boolean withBack) {
        Long exp = db.getSubscriptionExpiry(userId);
        String status;
        if (exp == null) {
            status = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.";
        } else {
            boolean active = exp > System.currentTimeMillis();
            status = (active ? "‚ú® –ü–æ–¥–ø–∏—Å–∫–∞ –ê–ö–¢–ò–í–ù–ê –¥–æ " : "‚õî –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ ") + df.format(new Date(exp));
        }

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        if (withBack) rows.add(Collections.singletonList(btn("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é", CB_MENU_BACK)));
        InlineKeyboardMarkup kb = new InlineKeyboardMarkup(rows);

        SendMessage sm = new SendMessage(String.valueOf(chatId), "üé´ –í–ê–®–ê –ü–û–î–ü–ò–°–ö–ê\n" + status);
        sm.setReplyMarkup(kb);
        safeExec(sm);
    }

    // ===================== Prodamus: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ =====================

    /** –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–µ–±—Å–µ—Ä–≤–µ—Ä–æ–º –≤–µ–±—Ö—É–∫–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏. */
    public void onProdamusPaid(long uid, int days) {
        try {
            db.grantSubscription(uid, days);
            String invite = ensureInviteLink();
            if (invite != null) {
                sendText(uid, "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–ø–ª–∞—Ç—É! ‚ú®\n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç:\n" + invite);
            } else {
                sendText(uid, "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–ø–ª–∞—Ç—É! ‚ú® –ú—ã —Å–∫–æ—Ä–æ –ø—Ä–∏—à–ª—ë–º —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç.");
            }
        } catch (Exception e) {
            LOG.error("onProdamusPaid error", e);
        }
    }

    // ===================== –†–∞–±–æ—Ç–∞ —Å –≥—Ä—É–ø–ø–æ–π: –∏–Ω–≤–∞–π—Ç –∏ —á–∏—Å—Ç–∫–∞ =====================

    private String ensureInviteLink() {
        String invite = db.getSetting(S_GROUP_INVITE_URL, "");
        if (!invite.isBlank()) return invite;
        String groupIdStr = db.getSetting(S_GROUP_ID, "");
        if (groupIdStr.isBlank()) return null;
        try {
            CreateChatInviteLink req = new CreateChatInviteLink();
            req.setChatId(groupIdStr);
            ChatInviteLink link = execute(req);
            if (link != null && link.getInviteLink() != null) {
                db.setSetting(S_GROUP_INVITE_URL, link.getInviteLink());
                return link.getInviteLink();
            }
        } catch (Exception e) {
            LOG.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É: {}", e.getMessage());
        }
        return null;
    }

    /** –ö–∏–∫–∞–µ–º –≤—Å–µ—Ö —Å –∏—Å—Ç—ë–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ). */
    private int cleanupExpired() {
        String groupIdStr = db.getSetting(S_GROUP_ID, "");
        if (groupIdStr.isBlank()) return 0;
        int removed = 0;
        List<Long> expired = db.listExpiredSince(System.currentTimeMillis());
        for (Long uid : expired) {
            try {
                BanChatMember ban = new BanChatMember();
                ban.setChatId(groupIdStr);
                ban.setUserId(uid);
                ban.setUntilDate((int) (System.currentTimeMillis() / 1000) + 60);
                execute(ban);
                removed++;
            } catch (Exception e) {
                LOG.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {}: {}", uid, e.getMessage());
            }
        }
        return removed;
    }

    // ===================== –ù–∞–≥—Ä–∞–¥–∞ (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã) =====================

    /** –¢–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: –µ—Å–ª–∏ –µ—Å—Ç—å cover-—Ñ–æ—Ç–æ ‚Äî —à–ª—ë–º —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –ø–æ–¥–ø–∏—Å—å—é; –∑–∞—Ç–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã. */
    private void sendReward(long chatId, Keyword kw) {
        try {
            List<String> materials = kw.getMaterials();
            String rewardText = safeTrim(kw.getRewardText());

            if (materials == null || materials.isEmpty()) {
                if (!rewardText.isEmpty()) sendText(chatId, rewardText);
                return;
            }

            String image = null;
            List<String> docs = new ArrayList<>();
            for (String m : materials) {
                if (m == null || m.isBlank()) continue;
                String v = m.trim();
                if (isImageSpec(v)) { if (image == null) image = stripImgPrefix(v); else docs.add(v); }
                else docs.add(v);
            }

            // 1) –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë —Å –ø–æ–¥–ø–∏—Å—å—é
            if (image != null) {
                sendSinglePhoto(chatId, image, rewardText);
            } else if (!rewardText.isEmpty()) {
                // –∏–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—Å—å –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                sendText(chatId, rewardText);
            }

            // 2) –ó–∞—Ç–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            if (!docs.isEmpty()) {
                sendDocumentsSmart(chatId, docs);
            }

        } catch (Exception e) {
            LOG.error("sendReward error", e);
        }
    }

    private void sendSinglePhoto(long chatId, String ref, String caption) {
        try {
            InputFile file = toInputFile(ref);
            SendPhoto sp = new SendPhoto(String.valueOf(chatId), file);
            if (caption != null && !caption.isBlank()) sp.setCaption(caption);
            execute(sp);
        } catch (Exception e) {
            LOG.warn("–§–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, —à–ª—ë–º —Å—Å—ã–ª–∫–æ–π: {}", e.getMessage());
            if (caption != null && !caption.isBlank()) sendText(chatId, caption);
            sendText(chatId, "–ú–∞—Ç–µ—Ä–∏–∞–ª: " + ref);
        }
    }

    private void sendDocumentsSmart(long chatId, List<String> docs) {
        if (docs == null || docs.isEmpty()) return;
        if (docs.size() == 1) { sendSingleDocument(chatId, docs.get(0)); }
        else { sendDocumentsAsAlbums(chatId, docs); }
    }

    private void sendDocumentsAsAlbums(long chatId, List<String> docs) {
        int i = 0;
        while (i < docs.size()) {
            int batchSize = Math.min(10, docs.size() - i);
            if (batchSize == 1) { sendSingleDocument(chatId, docs.get(i)); i++; continue; }
            List<InputMedia> pack = new ArrayList<>(batchSize);
            for (int j = 0; j < batchSize; j++) pack.add(buildInputMediaDocument(docs.get(i + j)));
            try {
                SendMediaGroup smg = new SendMediaGroup(String.valueOf(chatId), pack);
                execute(smg);
            } catch (Exception ex) {
                LOG.warn("–ê–ª—å–±–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è, fallback –ø–æ –æ–¥–Ω–æ–º—É: {}", ex.getMessage());
                for (int j = 0; j < batchSize; j++) sendSingleDocument(chatId, docs.get(i + j));
            }
            i += batchSize;
        }
    }

    private void sendSingleDocument(long chatId, String ref) {
        try {
            SendDocument sd = new SendDocument(String.valueOf(chatId), toInputFile(ref));
            execute(sd);
        } catch (Exception ex2) {
            LOG.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç '{}': {}", ref, ex2.getMessage());
            sendText(chatId, "–ú–∞—Ç–µ—Ä–∏–∞–ª: " + ref);
        }
    }

    private InputMediaDocument buildInputMediaDocument(String ref) {
        InputMediaDocument doc = new InputMediaDocument();
        doc.setMedia(String.valueOf(toInputFile(ref))); // –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞—ë–º InputFile, –∞ –Ω–µ String
        return doc;
    }

    // ===================== helpers =====================

    private void safeExec(BotApiMethod<?> method) {
        try { execute(method); } catch (Exception e) { LOG.error("execute error", e); }
    }

    private static InlineKeyboardButton btn(String text, String data) {
        InlineKeyboardButton b = new InlineKeyboardButton();
        b.setText(text);
        b.setCallbackData(data);
        return b;
    }

    private void sendText(long chatId, String text) {
        try { execute(new SendMessage(String.valueOf(chatId), text)); }
        catch (Exception e) { LOG.error("sendText error", e); }
    }

    private void answerCallback(String callbackId, String text) {
        try {
            AnswerCallbackQuery ac = new AnswerCallbackQuery();
            ac.setCallbackQueryId(callbackId);
            ac.setText(text);
            ac.setShowAlert(false);
            execute(ac);
        } catch (Exception e) { LOG.error("answerCallback error", e); }
    }

    private static boolean isHttpUrl(String s) {
        if (s == null) return false;
        String v = s.trim().toLowerCase(Locale.ROOT);
        return v.startsWith("http://") || v.startsWith("https://");
    }

    /** –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –∏—â–µ–º —Ñ–∞–π–ª: ./, ./files/, NFC/NFD, /work/files/ */
    private File resolveLocalPath(String ref) {
        if (ref == null || ref.isBlank()) return null;

        File direct = new File(ref);
        if (direct.exists()) return direct;

        if (!ref.startsWith("/") && !ref.startsWith("./")) {
            File underFiles = new File("./files/" + ref);
            if (underFiles.exists()) return underFiles;
        }

        try {
            String nfc = Normalizer.normalize(ref, Normalizer.Form.NFC);
            String nfd = Normalizer.normalize(ref, Normalizer.Form.NFD);
            if (!nfc.equals(ref)) {
                File f1 = new File(nfc);
                if (f1.exists()) return f1;
                File f1b = new File("./files/" + nfc);
                if (f1b.exists()) return f1b;
            }
            if (!nfd.equals(ref)) {
                File f2 = new File(nfd);
                if (f2.exists()) return f2;
                File f2b = new File("./files/" + nfd);
                if (f2b.exists()) return f2b;
            }
        } catch (Exception ignore) {}

        File fromWork = new File("/work/files/" + ref);
        if (fromWork.exists()) return fromWork;

        return null;
    }

    private InputFile toInputFile(String ref) {
        if (isHttpUrl(ref)) return new InputFile(normalizeUrl(ref));

        File f = resolveLocalPath(ref);
        if (f != null && f.exists() && f.isFile()) return new InputFile(f, f.getName());

        return new InputFile(ref); // file_id –∏–ª–∏ —Å—ã—Ä–æ–π ref
    }

    private static String appendParams(String base, Map<String,String> q) {
        if (base == null) return null;
        StringBuilder sb = new StringBuilder(base);
        boolean hasQ = base.contains("?");
        for (Map.Entry<String,String> e : q.entrySet()) {
            sb.append(hasQ ? '&' : '?'); hasQ = true;
            sb.append(urlEncode(e.getKey())).append('=').append(urlEncode(e.getValue()));
        }
        return sb.toString();
    }

    private static String urlEncode(String s) {
        try { return java.net.URLEncoder.encode(s, java.nio.charset.StandardCharsets.UTF_8); }
        catch (Exception e) { return s; }
    }

    private static String normalizeUrl(String url) {
        if (url == null) return null;
        String v = url.trim();
        if (!(v.startsWith("http://") || v.startsWith("https://"))) return v;
        v = v.replace(" ", "%20")
                .replace("(", "%28").replace(")", "%29")
                .replace("[", "%5B").replace("]", "%5D")
                .replace("{", "%7B").replace("}", "%7D");
        try { return new URI(v).toASCIIString(); } catch (Exception ignore) { return v; }
    }

    private static String safeTrim(String s) { return s == null ? "" : s.trim(); }
    private static String nonEmpty(String s, String def) { return (s == null || s.isBlank()) ? def : s; }
    private static int safeParseInt(String s, int def) { try { return Integer.parseInt(s.trim()); } catch (Exception e){ return def; } }

    private static boolean isImageSpec(String s) {
        if (s == null) return false;
        String v = s.trim().toLowerCase(Locale.ROOT);
        if (v.startsWith("img:")) return true;
        return v.endsWith(".jpg") || v.endsWith(".jpeg") || v.endsWith(".png")
                || v.endsWith(".webp") || v.endsWith(".heic");
    }
    private static String stripImgPrefix(String s) {
        if (s == null) return null;
        String v = s.trim();
        if (v.toLowerCase(Locale.ROOT).startsWith("img:")) return v.substring(4).trim();
        return v;
    }
}