package ru.animabot;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.groupadministration.BanChatMember;
import org.telegram.telegrambots.meta.api.methods.groupadministration.CreateChatInviteLink;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.send.SendVideo;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.ChatInviteLink;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.InputFile;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.io.File;
import java.net.URI;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.*;

/**
 * –ë–æ—Ç:
 *  - /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å –∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–æ–º (–º–µ–Ω—è–µ–º —á–µ—Ä–µ–∑ /setgift).
 *  - –¢–∞—Ä–∏—Ñ—ã: —Å–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ã (orders) –∏ –ø–µ—Ä–µ–¥–∞—ë–º –≤ —Å—Å—ã–ª–∫—É order_id + plan + customer_extra + sw_sig.
 *  - Webhook –ø–æ order_id –Ω–∞—Ö–æ–¥–∏—Ç userId –∏ –≤—ã–¥–∞—ë—Ç –ø–æ–¥–ø–∏—Å–∫—É.
 *  - –ú–µ–Ω—é/–±–æ–Ω—É—Å—ã ‚Äî –∫–∞–∫ –±—ã–ª–æ.
 */
public class SoulWayBot extends TelegramLongPollingBot {

    private static final Logger LOG = LoggerFactory.getLogger(SoulWayBot.class);

    // ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
    private static final String S_WELCOME_TEXT     = "welcome_text";
    private static final String S_WELCOME_VIDEO    = "welcome_video";

    private static final String S_CLUB_TEXT        = "club_text";
    private static final String S_REVIEWS_TEXT     = "reviews_text";
    private static final String S_REVIEWS_URL      = "reviews_url";
    private static final String S_ABOUT_TEXT       = "about_text";
    private static final String S_SESSIONS_TEXT    = "sessions_text";
    private static final String S_SESSIONS_URL     = "sessions_url";
    private static final String S_PROCVETA_TEXT    = "procveta_text";
    private static final String S_PROCVETA_URL     = "procveta_url";

    private static final String S_TAR1_LABEL = "tariff1_label";
    private static final String S_TAR1_DAYS  = "tariff1_days";
    private static final String S_TAR1_URL   = "tariff1_url";

    private static final String S_TAR2_LABEL = "tariff2_label";
    private static final String S_TAR2_DAYS  = "tariff2_days";
    private static final String S_TAR2_URL   = "tariff2_url";

    private static final String S_TAR3_LABEL = "tariff3_label";
    private static final String S_TAR3_DAYS  = "tariff3_days";
    private static final String S_TAR3_URL   = "tariff3_url";

    private static final String S_GROUP_ID         = "group_id";
    private static final String S_GROUP_INVITE_URL = "group_invite_url";

    /** –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∫–Ω–æ–ø–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –î–û–õ–ñ–ù–û —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ keywords. */
    private static final String S_GIFT_KEYWORD     = "gift_keyword";

    // –ë–æ—Ç / –ê–¥–º–∏–Ω / –ö–∞–Ω–∞–ª
    private final String BOT_TOKEN    = System.getenv().getOrDefault("TG_BOT_TOKEN", "YOUR_TOKEN");
    private final String BOT_USERNAME = System.getenv().getOrDefault("TG_BOT_USERNAME", "SoulWayClub_bot");
    private final long   ADMIN_ID     = Long.parseLong(System.getenv().getOrDefault("TG_ADMIN_ID", "726773708"));
    private final String CHANNEL_ID   = System.getenv().getOrDefault("TG_CHANNEL_ID", "sibirskaiapro"); // –±–µ–∑ @

    /** –°–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ sw_sig. */
    private final String BOT_LINK_SECRET = System.getenv().getOrDefault("BOT_LINK_SECRET", "");

    /** –ö–æ—Ä–µ–Ω—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. */
    private static final String FILES_ROOT = "/work/files/";

    private final SQLiteManager db;
    private final SimpleDateFormat df = new SimpleDateFormat("dd.MM.yyyy HH:mm");

    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();

    // Callback payloads
    private static final String CB_CHECKSUB_PREFIX = "CHECKSUB:";
    private static final String CB_OPENKW_PREFIX   = "OPENKW:";

    private static final String CB_MENU_CLUB   = "MENU:CLUB";
    private static final String CB_MENU_TARIFF = "MENU:TARIFFS";
    private static final String CB_MENU_REV    = "MENU:REVIEWS";
    private static final String CB_MENU_ABOUT  = "MENU:ABOUT";
    private static final String CB_MENU_SESS   = "MENU:SESSIONS";
    private static final String CB_MENU_SUB    = "MENU:SUB";
    private static final String CB_MENU_PROCV  = "MENU:PROCVETA";
    private static final String CB_MENU_BACK   = "MENU:BACK";

    public SoulWayBot() {
        db = new SQLiteManager("soulway.db");
        df.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));
        seedDefaults();
        scheduler.scheduleAtFixedRate(() -> {
            try { cleanupExpired(); } catch (Exception e) { LOG.warn("cleanup error", e); }
        }, 30, 30, TimeUnit.MINUTES);
    }

    /** –î–æ—Å—Ç—É–ø –∫ –ë–î –¥–ª—è –≤–µ–±—Ö—É–∫–∞. */
    public SQLiteManager getDb() { return db; }

    /** HMAC-SHA256 -> hex –¥–ª—è sw_sig. */
    public static String hmacSha256Hex(String data, String secret) {
        try {
            Mac mac = Mac.getInstance("HmacSHA256");
            mac.init(new SecretKeySpec(secret.getBytes(java.nio.charset.StandardCharsets.UTF_8), "HmacSHA256"));
            byte[] out = mac.doFinal(data.getBytes(java.nio.charset.StandardCharsets.UTF_8));
            StringBuilder sb = new StringBuilder(out.length * 2);
            for (byte b : out) sb.append(String.format("%02x", b));
            return sb.toString();
        } catch (Exception e) { throw new RuntimeException(e); }
    }

    private void seedDefaults() {
        putIfEmpty(S_WELCOME_TEXT,
                "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {name}!\n\n" +
                        "‚ú® –•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫?\n" +
                        "–¢–æ–≥–¥–∞ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –∑–∞–±–∏—Ä–∞–π üéÅ");

        putIfEmpty(S_GIFT_KEYWORD, "–°–í–û–ë–û–î–ê");

        putIfEmpty(S_CLUB_TEXT,
                "üìò –û –ö–õ–£–ë–ï\n\n" +
                        "‚úÖ –î–æ—Å—Ç—É–ø –∫ –∑–∞–ø–∏—Å–∏ —Ç—Ä—ë—Ö —Ä–æ–¥–æ–≤—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫\n" +
                        "‚úÖ –ú–µ–¥–∏—Ç–∞—Ü–∏–∏ ¬´–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞¬ª –∏ ¬´–°–æ—Å—Ç–æ—è–Ω–∏–µ –ò–∑–æ–±–∏–ª–∏—è¬ª\n" +
                        "‚úÖ 2 –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∏ —Å —á–µ–Ω–Ω–µ–ª–∏–Ω–≥-–º–µ–¥–∏—Ç–∞—Ü–∏—è–º–∏\n" +
                        "‚úÖ –ö—É—Ä—Å ¬´–í—ã–±–µ—Ä–∏ –°–∏–ª—É¬ª (18 —É—Ä–æ–∫–æ–≤)\n" +
                        "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏, —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n" +
                        "–ë–æ–Ω—É—Å: —Å–∫–∏–¥–∫–∞ 40% –Ω–∞ –ª–∏—á–Ω—É—é —Å–µ—Å—Å–∏—é");

        putIfEmpty(S_REVIEWS_TEXT,  "üìù –û–¢–ó–´–í–´\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã:");
        putIfEmpty(S_REVIEWS_URL,   "https://t.me/sibirskaiapro/336");
        putIfEmpty(S_ABOUT_TEXT,
                "üë§ –û–ë–û –ú–ù–ï\n\n" +
                        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞ –°–∏–±–∏—Ä—Å–∫–∞—è ‚Äî —ç–Ω–µ—Ä–≥–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç, –ø–∞—Ä–∞–ø—Å–∏—Ö–æ–ª–æ–≥, —á–µ–Ω–Ω–µ–ª–µ—Ä, " +
                        "–≤–µ–¥—É—â–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–≥—Ä –∏ —Ö—É–¥–æ–∂–Ω–∏—Ü–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–∏–Ω.\n" +
                        "–°–æ–∑–¥–∞–ª–∞ –∫–ª—É–±—ã ¬´–ü—Ä–æ—Ü–≤–µ—Ç–∞–π¬ª –∏ ¬´–ü—É—Ç—å –î—É—à–∏ (Soul Way)¬ª.\n");
        putIfEmpty(S_SESSIONS_TEXT,"üßò‚Äç‚ôÄÔ∏è –ú–û–ò –°–ï–ê–ù–°–´\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ —Å–µ–∞–Ω—Å–∞–º–∏:");
        putIfEmpty(S_SESSIONS_URL, "https://t.me/sibirskaiapro/65");
        putIfEmpty(S_PROCVETA_TEXT,"üå∏ –ö–õ–£–ë ¬´–ü–†–û–¶–í–ï–¢–ê–ô¬ª\n–ö–ª—É–± —Å –∂–∏–≤—ã–º–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ ‚ù§Ô∏è");
        putIfEmpty(S_PROCVETA_URL, "https://t.me/procvetaiclub");

        putIfEmpty(S_TAR1_LABEL, "1 –ú–ï–° ‚Ä¢ 1299 ‚ÇΩ");
        putIfEmpty(S_TAR1_DAYS,  "30");
        putIfEmpty(S_TAR1_URL,   "https://payform.ru/4e9isVQ/");

        putIfEmpty(S_TAR2_LABEL, "3 –ú–ï–° ‚Ä¢ 3599 ‚ÇΩ");
        putIfEmpty(S_TAR2_DAYS,  "90");
        putIfEmpty(S_TAR2_URL,   "https://payform.ru/en9it1j/");

        putIfEmpty(S_TAR3_LABEL, "12 –ú–ï–° ‚Ä¢ 12900 ‚ÇΩ");
        putIfEmpty(S_TAR3_DAYS,  "365");
        putIfEmpty(S_TAR3_URL,   "https://payform.ru/kr9it4z/");
    }

    private void putIfEmpty(String key, String value) {
        String cur = db.getSetting(key, null);
        if (cur == null || cur.isBlank()) db.setSetting(key, value);
    }

    @Override public String getBotUsername() { return BOT_USERNAME; }
    @Override public String getBotToken() { return BOT_TOKEN; }

    // ===== Updates =====
    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update == null) return;
            if (update.hasMessage()) handleMessage(update.getMessage());
            else if (update.hasCallbackQuery()) handleCallback(update.getCallbackQuery());
        } catch (Exception e) {
            LOG.error("Error processing update", e);
        }
    }

    // ===== Messages & Commands =====
    private void handleMessage(Message msg) {
        if (msg == null || msg.getFrom() == null) return;
        long chatId = msg.getChatId();
        String text = msg.hasText() ? msg.getText().trim() : "";

        try {
            if (text.startsWith("/")) { handleCommand(msg, text); return; }

            if (!text.isEmpty()) {
                Keyword kw = db.findKeywordByKey(text);
                if (kw != null) {
                    SendMessage sm = new SendMessage();
                    sm.setChatId(String.valueOf(chatId));
                    sm.setText(nonEmpty(kw.getIntroText(), "üéÅ –ü–æ–¥–∞—Ä–æ–∫:"));
                    sm.setReplyMarkup(buildIntroKeyboard(kw));
                    execute(sm);
                } else {
                    sendText(chatId, "‚ùå –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
                }
            }
        } catch (Exception e) {
            LOG.error("handleMessage error", e);
        }
    }

    private void handleCommand(Message msg, String text) {
        long chatId = msg.getChatId();
        long userId = msg.getFrom().getId();
        String[] parts = text.split(" ", 2);
        String cmd = parts[0].toLowerCase(Locale.ROOT);
        String args = parts.length > 1 ? parts[1] : "";

        try {
            switch (cmd) {
                case "/start": {
                    String raw = db.getSetting(S_WELCOME_TEXT,
                            "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {name}!\n\n‚ú® –•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫?\n–¢–æ–≥–¥–∞ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –∑–∞–±–∏—Ä–∞–π üéÅ");
                    String name = msg.getFrom().getFirstName() != null ? msg.getFrom().getFirstName() : "–¥—Ä—É–≥";
                    SendMessage sm = new SendMessage(String.valueOf(chatId), raw.replace("{name}", name));
                    sm.setReplyMarkup(buildStartGiftKeyboard());
                    safeExec(sm);
                    break;
                }
                case "/setgift": {
                    if (!isAdmin(userId)) { deny(chatId); break; }
                    if (args.isBlank()) { sendText(chatId, "–§–æ—Ä–º–∞—Ç: /setgift <KEYWORD>"); break; }
                    db.setSetting(S_GIFT_KEYWORD, args.trim().toUpperCase(Locale.ROOT));
                    sendText(chatId, "‚úÖ –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ–¥–∞—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: " + args.trim().toUpperCase(Locale.ROOT));
                    break;
                }
                case "/addkw": {
                    if (!isAdmin(userId)) { deny(chatId); break; }
                    if (args.isBlank()) { sendText(chatId, "–§–æ—Ä–º–∞—Ç: /addkw KEY|INTRO|REWARD|mat1,mat2"); break; }
                    String[] p = args.split("\\|", 4);
                    if (p.length < 3) { sendText(chatId, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º KEY|INTRO|REWARD"); break; }
                    Keyword kw = new Keyword(
                            safeTrim(p[0]).toUpperCase(Locale.ROOT),
                            safeTrim(p[1]),
                            safeTrim(p[2]),
                            (p.length == 4 && p[3] != null && !p[3].isBlank())
                                    ? Arrays.asList(p[3].split(","))
                                    : Collections.emptyList()
                    );
                    db.upsertKeyword(kw);
                    sendText(chatId, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ: " + kw.getKeyword());
                    break;
                }
                case "/listkw": {
                    if (!isAdmin(userId)) { deny(chatId); break; }
                    List<Keyword> list = db.listKeywords();
                    if (list.isEmpty()) sendText(chatId, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.");
                    else {
                        StringBuilder sb = new StringBuilder("–ö–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞:\n");
                        for (Keyword k : list) sb.append("‚Ä¢ ").append(k.getKeyword()).append("\n");
                        sendText(chatId, sb.toString());
                    }
                    break;
                }

                // —Ç–µ–∫—Å—Ç—ã/—Å—Å—ã–ª–∫–∏
                case "/setwelcome":       if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_WELCOME_TEXT, args); sendText(chatId, "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω."); break;
                case "/setwelcomevideo":  if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_WELCOME_VIDEO, args); sendText(chatId, "‚úÖ –í–∏–¥–µ–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ."); break;
                case "/setclub":          if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_CLUB_TEXT, args);     sendText(chatId, "‚úÖ ¬´–û –∫–ª—É–±–µ¬ª –æ–±–Ω–æ–≤–ª—ë–Ω."); break;
                case "/setreviews":       if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_REVIEWS_URL, args);   sendText(chatId, "‚úÖ –°—Å—ã–ª–∫–∞ ¬´–û—Ç–∑—ã–≤—ã¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞."); break;
                case "/setreviews_text":  if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_REVIEWS_TEXT, args);  sendText(chatId, "‚úÖ –¢–µ–∫—Å—Ç ¬´–û—Ç–∑—ã–≤—ã¬ª –æ–±–Ω–æ–≤–ª—ë–Ω."); break;
                case "/setabout":         if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_ABOUT_TEXT, args);    sendText(chatId, "‚úÖ ¬´–û–±–æ –º–Ω–µ¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–æ."); break;
                case "/setsessions":      if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_SESSIONS_URL, args);  sendText(chatId, "‚úÖ –°—Å—ã–ª–∫–∞ ¬´–°–µ–∞–Ω—Å—ã¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞."); break;
                case "/setsessions_text": if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_SESSIONS_TEXT, args); sendText(chatId, "‚úÖ –¢–µ–∫—Å—Ç ¬´–°–µ–∞–Ω—Å—ã¬ª –æ–±–Ω–æ–≤–ª—ë–Ω."); break;
                case "/setprocveta":      if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_PROCVETA_URL, args);  sendText(chatId, "‚úÖ –°—Å—ã–ª–∫–∞ ¬´–ü—Ä–æ—Ü–≤–µ—Ç–∞–π¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞."); break;
                case "/setprocveta_text": if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_PROCVETA_TEXT, args); sendText(chatId, "‚úÖ –¢–µ–∫—Å—Ç ¬´–ü—Ä–æ—Ü–≤–µ—Ç–∞–π¬ª –æ–±–Ω–æ–≤–ª—ë–Ω."); break;

                // —Ç–∞—Ä–∏—Ñ—ã
                case "/settariff1": {
                    if (!isAdmin(userId)) { deny(chatId); break; }
                    String[] a = args.split("\\|", 3);
                    if (a.length < 3) { sendText(chatId, "–§–æ—Ä–º–∞—Ç: /settariff1 LABEL|DAYS|URL"); break; }
                    db.setSetting(S_TAR1_LABEL, a[0].trim());
                    db.setSetting(S_TAR1_DAYS,  a[1].trim());
                    db.setSetting(S_TAR1_URL,   a[2].trim());
                    sendText(chatId, "‚úÖ –¢–∞—Ä–∏—Ñ #1 —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
                    break;
                }
                case "/settariff2": {
                    if (!isAdmin(userId)) { deny(chatId); break; }
                    String[] a = args.split("\\|", 3);
                    if (a.length < 3) { sendText(chatId, "–§–æ—Ä–º–∞—Ç: /settariff2 LABEL|DAYS|URL"); break; }
                    db.setSetting(S_TAR2_LABEL, a[0].trim());
                    db.setSetting(S_TAR2_DAYS,  a[1].trim());
                    db.setSetting(S_TAR2_URL,   a[2].trim());
                    sendText(chatId, "‚úÖ –¢–∞—Ä–∏—Ñ #2 —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
                    break;
                }
                case "/settariff3": {
                    if (!isAdmin(userId)) { deny(chatId); break; }
                    String[] a = args.split("\\|", 3);
                    if (a.length < 3) { sendText(chatId, "–§–æ—Ä–º–∞—Ç: /settariff3 LABEL|DAYS|URL"); break; }
                    db.setSetting(S_TAR3_LABEL, a[0].trim());
                    db.setSetting(S_TAR3_DAYS,  a[1].trim());
                    db.setSetting(S_TAR3_URL,   a[2].trim());
                    sendText(chatId, "‚úÖ –¢–∞—Ä–∏—Ñ #3 —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
                    break;
                }

                // –≥—Ä—É–ø–ø–∞/—Å–µ—Ä–≤–∏—Å
                case "/setgroup":     if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_GROUP_ID, args.trim());         sendText(chatId, "‚úÖ ID –≥—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω."); break;
                case "/setgrouplink": if (!isAdmin(userId)) { deny(chatId); break; } db.setSetting(S_GROUP_INVITE_URL, args.trim()); sendText(chatId, "‚úÖ –ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."); break;
                case "/grantsub": {
                    if (!isAdmin(userId)) { deny(chatId); break; }
                    String[] a = args.split("\\s+");
                    if (a.length < 2) { sendText(chatId, "–§–æ—Ä–º–∞—Ç: /grantsub <userId> <days>"); break; }
                    long uid = Long.parseLong(a[0]);
                    int days = Integer.parseInt(a[1]);
                    db.grantSubscription(uid, days);
                    sendText(chatId, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞: " + uid + " –Ω–∞ " + days + " –¥–Ω.");
                    String invite = ensureInviteLink();
                    if (invite != null) sendText(uid, "üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç: " + invite);
                    break;
                }
                case "/cleanup": {
                    if (!isAdmin(userId)) { deny(chatId); break; }
                    int n = cleanupExpired();
                    sendText(chatId, "üßπ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –≥—Ä—É–ø–ø—ã: " + n);
                    break;
                }

                default: sendText(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
            }
        } catch (Exception e) {
            LOG.error("handleCommand error", e);
        }
    }

    private boolean isAdmin(long uid) { return uid == ADMIN_ID; }
    private void deny(long chatId) { sendText(chatId, "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."); }

    // ===== Callbacks =====
    private void handleCallback(CallbackQuery cb) {
        if (cb == null) return;
        String data = cb.getData();
        long uid = cb.getFrom().getId();
        long chatId = cb.getMessage() != null ? cb.getMessage().getChatId() : uid;

        try {
            if (data != null && data.startsWith(CB_CHECKSUB_PREFIX)) {
                String key = data.substring(CB_CHECKSUB_PREFIX.length());
                Keyword kw = db.findKeywordByKey(key);
                if (kw == null) { answerCallback(cb.getId(), "–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."); return; }
                answerCallback(cb.getId(), "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!");
                sendReward(chatId, kw);
                String firstName = cb.getFrom().getFirstName() != null ? cb.getFrom().getFirstName() : "–¥—Ä—É–≥";
                sendWelcomeWithMenu(chatId, firstName);
                return;
            }

            if (data != null && data.startsWith(CB_OPENKW_PREFIX)) {
                String key = data.substring(CB_OPENKW_PREFIX.length());
                Keyword kw = db.findKeywordByKey(key);
                if (kw == null) { answerCallback(cb.getId(), "–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."); return; }
                SendMessage sm = new SendMessage();
                sm.setChatId(String.valueOf(chatId));
                sm.setText(nonEmpty(kw.getIntroText(), "üéÅ –ü–æ–¥–∞—Ä–æ–∫:"));
                sm.setReplyMarkup(buildIntroKeyboard(kw));
                safeExec(sm);
                answerCallback(cb.getId(), "");
                return;
            }

            switch (data) {
                case CB_MENU_CLUB: {
                    String club = db.getSetting(S_CLUB_TEXT, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
                    sendMenuSection(chatId, club, buildClubMenu());
                    answerCallback(cb.getId(), "");
                    break;
                }
                case CB_MENU_TARIFF: {
                    sendTariffs(chatId, uid, true);
                    answerCallback(cb.getId(), "");
                    break;
                }
                case CB_MENU_REV: {
                    String header = db.getSetting(S_REVIEWS_TEXT, "üìù –û–¢–ó–´–í–´\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã:");
                    String url = db.getSetting(S_REVIEWS_URL, "");
                    sendLinkSection(chatId, header, url, true);
                    answerCallback(cb.getId(), "");
                    break;
                }
                case CB_MENU_ABOUT: {
                    String about = db.getSetting(S_ABOUT_TEXT, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ¬´–û–±–æ –º–Ω–µ¬ª –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
                    sendMenuSection(chatId, about, true);
                    answerCallback(cb.getId(), "");
                    break;
                }
                case CB_MENU_SESS: {
                    String header = db.getSetting(S_SESSIONS_TEXT, "üßò‚Äç‚ôÄÔ∏è –ú–û–ò –°–ï–ê–ù–°–´\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ —Å–µ–∞–Ω—Å–∞–º–∏:");
                    String url = db.getSetting(S_SESSIONS_URL, "");
                    sendLinkSection(chatId, header, url, true);
                    answerCallback(cb.getId(), "");
                    break;
                }
                case CB_MENU_SUB: {
                    sendSubscriptionStatus(chatId, uid, true);
                    answerCallback(cb.getId(), "");
                    break;
                }
                case CB_MENU_PROCV: {
                    String header = db.getSetting(S_PROCVETA_TEXT, "üå∏ –ö–õ–£–ë ¬´–ü–†–û–¶–í–ï–¢–ê–ô¬ª\n–û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ.");
                    String url = db.getSetting(S_PROCVETA_URL, "");
                    sendLinkSection(chatId, header, url, true);
                    answerCallback(cb.getId(), "");
                    break;
                }
                case CB_MENU_BACK: {
                    String firstName = cb.getFrom().getFirstName() != null ? cb.getFrom().getFirstName() : "–¥—Ä—É–≥";
                    sendWelcomeWithMenu(chatId, firstName);
                    answerCallback(cb.getId(), "");
                    break;
                }
                default:
                    answerCallback(cb.getId(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.");
            }
        } catch (Exception e) {
            LOG.error("handleCallback error", e);
        }
    }

    // ===== –í–∏—Ç—Ä–∏–Ω—ã –∏ –º–µ–Ω—é =====

    private InlineKeyboardMarkup buildStartGiftKeyboard() {
        String key = db.getSetting(S_GIFT_KEYWORD, "–°–í–û–ë–û–î–ê").trim().toUpperCase(Locale.ROOT);
        InlineKeyboardButton b = new InlineKeyboardButton();
        b.setText("üéÅ " + key);
        b.setCallbackData(CB_OPENKW_PREFIX + key);
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(Collections.singletonList(b));
        InlineKeyboardMarkup kb = new InlineKeyboardMarkup();
        kb.setKeyboard(rows);
        return kb;
    }

    private InlineKeyboardMarkup buildIntroKeyboard(Keyword kw) {
        InlineKeyboardButton subscribe = new InlineKeyboardButton();
        subscribe.setText("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è");
        subscribe.setUrl("https://t.me/" + CHANNEL_ID);

        InlineKeyboardButton already = new InlineKeyboardButton();
        already.setText("‚úÖ –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞");
        already.setCallbackData(CB_CHECKSUB_PREFIX + kw.getKeyword());

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(Arrays.asList(subscribe, already));
        InlineKeyboardMarkup kb = new InlineKeyboardMarkup();
        kb.setKeyboard(rows);
        return kb;
    }

    private void sendWelcomeWithMenu(long chatId, String userName) {
        String raw = db.getSetting(S_WELCOME_TEXT, "{name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Soul Way.");
        String text = raw.replace("{name}", userName);

        String videoRef = db.getSetting(S_WELCOME_VIDEO, null);
        InlineKeyboardMarkup menu = buildMainMenu();

        if (videoRef != null && !videoRef.isBlank()) {
            try {
                SendVideo sv = new SendVideo();
                sv.setChatId(String.valueOf(chatId));
                sv.setVideo(toInputFile(videoRef, true));
                sv.setCaption(text);
                sv.setReplyMarkup(menu);
                execute(sv);
                return;
            } catch (Exception e) {
                LOG.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {}", e.getMessage());
            }
        }
        SendMessage sm = new SendMessage(String.valueOf(chatId), text);
        sm.setReplyMarkup(menu);
        safeExec(sm);
    }

    private InlineKeyboardMarkup buildMainMenu() {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(Collections.singletonList(btn("üìò –û –ö–õ–£–ë–ï", CB_MENU_CLUB)));
        rows.add(Collections.singletonList(btn("üí≥ –¢–ê–†–ò–§–´", CB_MENU_TARIFF)));
        rows.add(Collections.singletonList(btn("üìù –û–¢–ó–´–í–´", CB_MENU_REV)));
        rows.add(Collections.singletonList(btn("üë§ –û–ë–û –ú–ù–ï", CB_MENU_ABOUT)));
        rows.add(Collections.singletonList(btn("üßò‚Äç‚ôÄÔ∏è –ú–û–ò –°–ï–ê–ù–°–´", CB_MENU_SESS)));
        rows.add(Collections.singletonList(btn("üé´ –í–ê–®–ê –ü–û–î–ü–ò–°–ö–ê", CB_MENU_SUB)));
        rows.add(Collections.singletonList(btn("üå∏ –ö–õ–£–ë ¬´–ü–†–û–¶–í–ï–¢–ê–ô¬ª", CB_MENU_PROCV)));
        InlineKeyboardMarkup kb = new InlineKeyboardMarkup();
        kb.setKeyboard(rows);
        return kb;
    }

    private InlineKeyboardMarkup buildClubMenu() {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(Collections.singletonList(btn("üí≥ –¢–ê–†–ò–§–´", CB_MENU_TARIFF)));
        rows.add(Collections.singletonList(btn("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é", CB_MENU_BACK)));
        InlineKeyboardMarkup kb = new InlineKeyboardMarkup();
        kb.setKeyboard(rows);
        return kb;
    }

    private InlineKeyboardButton btn(String text, String data) {
        InlineKeyboardButton b = new InlineKeyboardButton();
        b.setText(text);
        b.setCallbackData(data);
        return b;
    }

    private InlineKeyboardMarkup addBackButton() {
        InlineKeyboardButton back = btn("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é", CB_MENU_BACK);
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(Collections.singletonList(back));
        InlineKeyboardMarkup kb = new InlineKeyboardMarkup();
        kb.setKeyboard(rows);
        return kb;
    }

    private void sendMenuSection(long chatId, String text, boolean withBack) {
        SendMessage sm = new SendMessage(String.valueOf(chatId), text);
        if (withBack) sm.setReplyMarkup(addBackButton());
        safeExec(sm);
    }

    private void sendMenuSection(long chatId, String text, InlineKeyboardMarkup kb) {
        SendMessage sm = new SendMessage(String.valueOf(chatId), text);
        sm.setReplyMarkup(kb);
        safeExec(sm);
    }

    private void sendLinkSection(long chatId, String header, String url, boolean withBack) {
        String body = header + (url == null || url.isBlank() ? "" : "\n" + url);
        SendMessage sm = new SendMessage(String.valueOf(chatId), body);
        if (withBack) sm.setReplyMarkup(addBackButton());
        safeExec(sm);
    }

    /** –¢–∞—Ä–∏—Ñ—ã: —Å–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ã –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. */
    private void sendTariffs(long chatId, long userId, boolean withBack) {
        String l1 = db.getSetting(S_TAR1_LABEL, "1 –ú–ï–° ‚Ä¢ 1299 ‚ÇΩ");
        int d1 = safeParseInt(db.getSetting(S_TAR1_DAYS, "30"), 30);
        String u1 = db.getSetting(S_TAR1_URL,  "https://payform.ru/4e9isVQ/");

        String l2 = db.getSetting(S_TAR2_LABEL, "3 –ú–ï–° ‚Ä¢ 3599 ‚ÇΩ");
        int d2 = safeParseInt(db.getSetting(S_TAR2_DAYS, "90"), 90);
        String u2 = db.getSetting(S_TAR2_URL,  "https://payform.ru/en9it1j/");

        String l3 = db.getSetting(S_TAR3_LABEL, "12 –ú–ï–° ‚Ä¢ 12900 ‚ÇΩ");
        int d3 = safeParseInt(db.getSetting(S_TAR3_DAYS, "365"), 365);
        String u3 = db.getSetting(S_TAR3_URL,  "https://payform.ru/kr9it4z/");

        String order1 = db.createPendingOrder(userId, 1, d1);
        String order2 = db.createPendingOrder(userId, 2, d2);
        String order3 = db.createPendingOrder(userId, 3, d3);

        String sig1 = hmacSha256Hex(userId + ":" + 1 + ":" + order1, BOT_LINK_SECRET);
        String sig2 = hmacSha256Hex(userId + ":" + 2 + ":" + order2, BOT_LINK_SECRET);
        String sig3 = hmacSha256Hex(userId + ":" + 3 + ":" + order3, BOT_LINK_SECRET);

        String link1 = appendParams(u1, Map.of("customer_extra", String.valueOf(userId), "plan", "1", "order_id", order1, "sw_sig", sig1));
        String link2 = appendParams(u2, Map.of("customer_extra", String.valueOf(userId), "plan", "2", "order_id", order2, "sw_sig", sig2));
        String link3 = appendParams(u3, Map.of("customer_extra", String.valueOf(userId), "plan", "3", "order_id", order3, "sw_sig", sig3));

        InlineKeyboardButton b1 = new InlineKeyboardButton();
        b1.setText(l1 + " ‚Ä¢ –æ–ø–ª–∞—Ç–∏—Ç—å");
        b1.setUrl(link1);

        InlineKeyboardButton b2 = new InlineKeyboardButton();
        b2.setText(l2 + " ‚Ä¢ –æ–ø–ª–∞—Ç–∏—Ç—å");
        b2.setUrl(link2);

        InlineKeyboardButton b3 = new InlineKeyboardButton();
        b3.setText(l3 + " ‚Ä¢ –æ–ø–ª–∞—Ç–∏—Ç—å");
        b3.setUrl(link3);

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(Collections.singletonList(b1));
        rows.add(Collections.singletonList(b2));
        rows.add(Collections.singletonList(b3));
        if (withBack) rows.add(Collections.singletonList(btn("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é", CB_MENU_BACK)));

        InlineKeyboardMarkup kb = new InlineKeyboardMarkup();
        kb.setKeyboard(rows);

        String intro = "üí≥ –¢–ê–†–ò–§–´\n\n" +
                "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –∏ –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ.\n\n" +
                "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —è –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç.";

        SendMessage sm = new SendMessage(String.valueOf(chatId), intro);
        sm.setReplyMarkup(kb);
        safeExec(sm);
    }

    private void sendSubscriptionStatus(long chatId, long userId, boolean withBack) {
        Long exp = db.getSubscriptionExpiry(userId);
        String status;
        if (exp == null) {
            status = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.";
        } else {
            boolean active = exp > System.currentTimeMillis();
            status = (active ? "‚ú® –ü–æ–¥–ø–∏—Å–∫–∞ –ê–ö–¢–ò–í–ù–ê –¥–æ " : "‚õî –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ ") + df.format(new Date(exp));
        }
        SendMessage sm = new SendMessage(String.valueOf(chatId), "üé´ –í–ê–®–ê –ü–û–î–ü–ò–°–ö–ê\n" + status);
        if (withBack) sm.setReplyMarkup(addBackButton());
        safeExec(sm);
    }

    // ===== –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ =====
    public void onProdamusPaid(long uid, int days) {
        try {
            if (uid <= 0) { LOG.warn("onProdamusPaid: –ø—É—Å—Ç–æ–π uid"); return; }
            db.grantSubscription(uid, days);
            String invite = ensureInviteLink();
            if (invite != null) {
                sendText(uid, "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–ø–ª–∞—Ç—É! ‚ú®\n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç:\n" + invite);
            } else {
                sendText(uid, "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–ø–ª–∞—Ç—É! ‚ú® –ú—ã —Å–∫–æ—Ä–æ –ø—Ä–∏—à–ª—ë–º —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç.");
            }
        } catch (Exception e) {
            LOG.error("onProdamusPaid error", e);
        }
    }

    // ===== –ì—Ä—É–ø–ø–∞ =====
    private String ensureInviteLink() {
        String invite = db.getSetting(S_GROUP_INVITE_URL, "");
        if (!invite.isBlank()) return invite;
        String groupIdStr = db.getSetting(S_GROUP_ID, "");
        if (groupIdStr.isBlank()) return null;
        try {
            CreateChatInviteLink req = new CreateChatInviteLink();
            req.setChatId(groupIdStr);
            ChatInviteLink link = execute(req);
            if (link != null && link.getInviteLink() != null) {
                db.setSetting(S_GROUP_INVITE_URL, link.getInviteLink());
                return link.getInviteLink();
            }
        } catch (Exception e) {
            LOG.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É: {}", e.getMessage());
        }
        return null;
    }

    /** –ö–∏–∫–∞–µ–º –≤—Å–µ—Ö —Å –∏—Å—Ç—ë–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–±–æ—Ç ‚Äî –∞–¥–º–∏–Ω). */
    private int cleanupExpired() {
        String groupIdStr = db.getSetting(S_GROUP_ID, "");
        if (groupIdStr.isBlank()) return 0;
        int removed = 0;
        List<Long> expired = db.listExpiredSince(System.currentTimeMillis());
        for (Long uid : expired) {
            try {
                BanChatMember ban = new BanChatMember();
                ban.setChatId(groupIdStr);
                ban.setUserId(uid);
                ban.setUntilDate((int) (System.currentTimeMillis() / 1000) + 60);
                execute(ban);
                removed++;
                Thread.sleep(100);
            } catch (Exception e) {
                LOG.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {}: {}", uid, e.getMessage());
            }
        }
        return removed;
    }

    // ===== –ù–∞–≥—Ä–∞–¥–∞ =====
    private void sendReward(long chatId, Keyword kw) {
        try {
            List<String> materials = kw.getMaterials();
            String rewardText = safeTrim(kw.getRewardText());

            if (materials == null || materials.isEmpty()) {
                if (!rewardText.isEmpty()) sendText(chatId, rewardText);
                return;
            }

            String image = null;
            List<String> docs = new ArrayList<>();
            for (String m : materials) {
                if (m == null || m.isBlank()) continue;
                String v = m.trim();
                if (isImageSpec(v)) { if (image == null) image = stripImgPrefix(v); else docs.add(v); }
                else docs.add(v);
            }

            if (image != null) {
                sendSinglePhoto(chatId, image, rewardText);
            } else if (!rewardText.isEmpty()) {
                sendText(chatId, rewardText);
            }
            if (!docs.isEmpty()) sendDocumentsIndividually(chatId, docs);

        } catch (Exception e) {
            LOG.error("sendReward error", e);
        }
    }

    private void sendSinglePhoto(long chatId, String ref, String caption) {
        try {
            SendPhoto sp = new SendPhoto();
            sp.setChatId(String.valueOf(chatId));
            sp.setPhoto(toInputFile(ref, true));
            if (caption != null && !caption.isBlank()) sp.setCaption(caption);
            execute(sp);
        } catch (Exception e) {
            LOG.warn("–§–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å: {}", e.getMessage());
            if (caption != null && !caption.isBlank()) sendText(chatId, caption);
            sendText(chatId, "–ú–∞—Ç–µ—Ä–∏–∞–ª: " + ref);
        }
    }

    private void sendDocumentsIndividually(long chatId, List<String> docs) {
        for (String ref : docs) {
            try {
                SendDocument sd = new SendDocument();
                sd.setChatId(String.valueOf(chatId));
                sd.setDocument(toInputFile(ref, true));
                execute(sd);
                Thread.sleep(80);
            } catch (Exception ex2) {
                LOG.warn("–î–æ–∫—É–º–µ–Ω—Ç '{}' –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è: {}", ref, ex2.getMessage());
                sendText(chatId, "–ú–∞—Ç–µ—Ä–∏–∞–ª: " + ref);
            }
        }
    }

    // ===== helpers =====
    private void safeExec(BotApiMethod<?> method) {
        try { execute(method); } catch (Exception e) { LOG.error("execute error", e); }
    }

    /** –í–û–¢ –≠–¢–û–ì–û –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ */
    private void sendText(long id, String text) {
        try { execute(new SendMessage(String.valueOf(id), text)); }
        catch (Exception e) { LOG.error("sendText error", e); }
    }

    /** –ò —ç—Ç–æ–≥–æ —Ç–æ–∂–µ */
    private void answerCallback(String callbackId, String text) {
        try {
            AnswerCallbackQuery ac = new AnswerCallbackQuery();
            ac.setCallbackQueryId(callbackId);
            ac.setText(text);
            ac.setShowAlert(false);
            execute(ac);
        } catch (Exception e) { LOG.error("answerCallback error", e); }
    }

    private static String appendParams(String base, Map<String,String> q) {
        if (base == null) return null;
        StringBuilder sb = new StringBuilder(base);
        boolean hasQ = base.contains("?");
        for (Map.Entry<String,String> e : q.entrySet()) {
            sb.append(hasQ ? '&' : '?'); hasQ = true;
            sb.append(urlEncode(e.getKey())).append('=').append(urlEncode(e.getValue()));
        }
        return sb.toString();
    }

    private static String urlEncode(String s) {
        try { return java.net.URLEncoder.encode(s, "UTF-8"); }
        catch (Exception e) { return s; }
    }

    private static InputFile toInputFile(String ref, boolean tryLocalFirst) {
        String v = safeTrim(ref);
        if (v.isEmpty()) return new InputFile(v);

        if (v.startsWith("files/") || v.startsWith("/files/")) {
            String tail = v.startsWith("/files/") ? v.substring("/files/".length()) : v.substring("files/".length());
            File local = new File(FILES_ROOT + tail);
            return new InputFile(local, local.getName());
        }

        File f = new File(v);
        if (tryLocalFirst && f.exists() && f.isFile()) {
            return new InputFile(f, f.getName());
        }

        if (!v.startsWith("http://") && !v.startsWith("https://") && !v.contains("/")) {
            File local = new File(FILES_ROOT + v);
            if (local.exists() && local.isFile()) return new InputFile(local, local.getName());
        }

        if (v.startsWith("http://") || v.startsWith("https://")) {
            return new InputFile(normalizeUrl(v));
        }

        return new InputFile(v); // telegram file_id
    }

    private static String normalizeUrl(String url) {
        if (url == null) return null;
        String v = url.trim();
        if (!(v.startsWith("http://") || v.startsWith("https://"))) return v;
        v = v.replace(" ", "%20")
                .replace("(", "%28").replace(")", "%29")
                .replace("[", "%5B").replace("]", "%5D")
                .replace("{", "%7B").replace("}", "%7D");
        try { return new URI(v).toASCIIString(); } catch (Exception ignore) { return v; }
    }

    private static String nonEmpty(String s, String def) { return (s == null || s.isBlank()) ? def : s; }
    private static String safeTrim(String s) { return s == null ? "" : s.trim(); }
    private static int safeParseInt(String s, int def) { try { return Integer.parseInt(s.trim()); } catch (Exception e){ return def; } }

    private static boolean isImageSpec(String s) {
        if (s == null) return false;
        String v = s.trim().toLowerCase(Locale.ROOT);
        if (v.startsWith("img:")) return true;
        return v.endsWith(".jpg") || v.endsWith(".jpeg") || v.endsWith(".png")
                || v.endsWith(".webp") || v.endsWith(".heic");
    }
    private static String stripImgPrefix(String s) {
        if (s == null) return null;
        String v = s.trim();
        if (v.toLowerCase(Locale.ROOT).startsWith("img:")) return v.substring(4).trim();
        return v;
    }
}